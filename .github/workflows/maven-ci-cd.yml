# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 20
      uses: actions/setup-java@v3
      with:
        java-version: '20.0.1+9'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn --batch-mode compile --file myapp/pom.xml -DbumpPatch
    - name: Run the Maven verify phase
      run: mvn --batch-mode --update-snapshots --file myapp/pom.xml verify

  package:
    name: package
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '20.0.1+9'
          distribution: 'temurin'
      - run: mvn --batch-mode package --file myapp/pom.xml -DskipTests -DbumpPatch
      - run: mkdir staging && cp myapp/target/*.jar staging
      - uses: actions/upload-artifact@v3
        with:
          name: Package
          path: staging
      - id: image_version
        run: |
          export IMAGE_VERSION="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file myapp/pom.xml)"
          echo "${IMAGE_VERSION}"
          echo "{release_version}={${IMAGE_VERSION}}" >> $GITHUB_OUTPUT
    outputs:
      release_version: ${{ steps.image_version.outputs.release_version }}
      
          
  build-docker-image:
    name: build-docker-image
    runs-on: ubuntu-latest
    needs: [package]

    steps:
      - env: 
          IMAGE_VERSION: ${{ needs.package.outputs.release_version }}
        run: echo "$IMAGE_VERSION"
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Container image
        run: docker build -t ${{ secrets.DOCKER_REPO }}:${{ needs.package.outputs.release_version }} .
      - name: Publish Docker image
        run: docker push ${{ secrets.DOCKER_REPO }}
